// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/owners/create": {
            "post": {
                "description": "Create a new admin in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admins"
                ],
                "summary": "Create an admin",
                "parameters": [
                    {
                        "description": "Admin input",
                        "name": "admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateAdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/owners/{adminId}/apikeys": {
            "post": {
                "description": "Creates a new API key for the given owner/admin. The key is returned in plaintext once.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admins"
                ],
                "summary": "Generate an API key for an owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner/Admin ID",
                        "name": "adminId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created API Key",
                        "schema": {
                            "$ref": "#/definitions/models.CreateAPIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/owners/{adminId}/apikeys/{apiKey}/disable": {
            "patch": {
                "description": "Marks an API key as revoked (revoked=true) for a specific owner/admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admins"
                ],
                "summary": "Disable an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner/Admin ID",
                        "name": "adminId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API Key value to disable",
                        "name": "apiKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API Key revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/models.DisableAPIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/user-pools/create": {
            "post": {
                "description": "Create a new user pool for grouping users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userpools"
                ],
                "summary": "Create a user pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Pool input",
                        "name": "userPool",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserPoolRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserPoolResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid API Key",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/user-pools/{userpoolId}": {
            "delete": {
                "description": "Deletes an existing user pool identified by its ID. Only the owner with a valid API key can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userpools"
                ],
                "summary": "Delete a user pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User Pool ID",
                        "name": "userpoolId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API Key",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User pool not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user pool",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates the name or schema of an existing user pool identified by its ID. The owner is authenticated via X-API-KEY.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userpools"
                ],
                "summary": "Update a user pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User Pool ID",
                        "name": "userpoolId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated User Pool data",
                        "name": "userPool",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserPoolRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserPoolResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid API Key",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User pool not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update user pool",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login/otp/request": {
            "post": {
                "description": "Starts OTP-based login by sending OTP to email or phone (based on method).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request OTP for login",
                "parameters": [
                    {
                        "description": "Login OTP request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OtpLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.OtpLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or method",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login/otp/verify": {
            "post": {
                "description": "Verifies the OTP provided by the user for OTP-based login. If valid, generates new ID, access, and refresh tokens, revokes previous refresh tokens, and returns the tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify OTP for login",
                "parameters": [
                    {
                        "description": "OTP verification request containing cache ID and OTP answer",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OtpLoginVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with new tokens",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, wrong OTP, or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "OTP session not found or expired",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server, database, or token generation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login/password": {
            "post": {
                "description": "Authenticates a user using email, password, and user pool. Returns ID token, access token, and refresh token on successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login with email and password",
                "parameters": [
                    {
                        "description": "Password login request including email, password, and user pool ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PasswordLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with tokens",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Incorrect password",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logs out the user by revoking all refresh tokens associated with their account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Logout request containing ID token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Unable to extract user ID from token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error while revoking tokens",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/password/request": {
            "post": {
                "description": "Initiates a password reset by generating and sending an OTP to the registered email for the specified userpool.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request password reset OTP",
                "parameters": [
                    {
                        "description": "Password reset request containing email and userpool",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully for password reset",
                        "schema": {
                            "$ref": "#/definitions/models.PasswordResetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, missing email, or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/password/reset": {
            "post": {
                "description": "Verifies the OTP and resets the user's password by updating the database record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Complete password reset",
                "parameters": [
                    {
                        "description": "Password reset verification request containing OTP and new password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PasswordResetVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body, wrong OTP, or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "OTP session expired or user not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/session/refresh": {
            "post": {
                "description": "Generates new ID and access tokens using a valid refresh token and ID token. Ensures the refresh token is valid and not revoked.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh session tokens",
                "parameters": [
                    {
                        "description": "Session refresh request containing ID token and refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New ID and access tokens returned",
                        "schema": {
                            "$ref": "#/definitions/models.RefreshSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or mismatched refresh token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup/complete": {
            "post": {
                "description": "Verifies the OTP sent to the user's email during signup, checks phone verification, creates the user in the database, assigns default roles, and returns JWT tokens for login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "Complete signup with email OTP verification",
                "parameters": [
                    {
                        "description": "Signup verification request including signup session ID and OTP",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserSignupVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signup completed successfully with ID, user ID, and tokens",
                        "schema": {
                            "$ref": "#/definitions/models.SignupCompleteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid signup ID, wrong OTP, or input validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "Phone not verified, cannot complete signup",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email or phone already verified / user already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error, Redis error, or database failure",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup/email/request": {
            "post": {
                "description": "Validates signup session ID, email, and password, generates an OTP, stores it in Redis, and sends it to the user's email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "Request OTP for email signup",
                "parameters": [
                    {
                        "description": "Signup email request data including signup session ID, email, and password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignupEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SignupEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, missing fields, or invalid signup session ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database or server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup/otp/phone/verify": {
            "post": {
                "description": "Verifies the phone OTP and marks the phone as verified in the signup session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "Verify phone signup OTP",
                "parameters": [
                    {
                        "description": "Phone OTP verification request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserSignupVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Phone verified successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserSignupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid signup ID or wrong OTP",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup/phone/request": {
            "post": {
                "description": "Validates phone and user pool, generates an OTP, stores it in Redis, and sends it to the user's phone.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "Request OTP for phone signup",
                "parameters": [
                    {
                        "description": "Signup phone request data including phone and userpool ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignupPhoneRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SignupPhoneResponse"
                        }
                    },
                    "400": {
                        "description": "Missing/Invalid essential inputs or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Phone number already registered",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database or server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/audit-logs": {
            "get": {
                "description": "Returns audit logs for a given user pool. Can filter by actor_id, action, and target_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Get audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User pool ID",
                        "name": "pool_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by actor ID",
                        "name": "actor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by target ID",
                        "name": "target_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of audit logs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AuditLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing pool_id",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/pools/{pool_id}/roles": {
            "post": {
                "description": "Creates a new role with permissions in the specified user pool.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Create a new role in a user pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Role creation request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid API key)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/pools/{pool_id}/users/{user_id}/roles": {
            "post": {
                "description": "Assigns a specific role to a user in the given user pool.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Assign a role to a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User pool ID",
                        "name": "pool_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID to assign role to",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing userID or roleID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid API key)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a role assigned to a specific user in the given user pool.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Revoke a role from a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User pool ID",
                        "name": "pool_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role revoked successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing userID or roleID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid API key)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/roles": {
            "get": {
                "description": "Returns all roles in a given user pool. Optionally, filter by user_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Retrieve roles for a user pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User pool ID",
                        "name": "pool_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional user ID to filter roles assigned to a specific user",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RolesRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (missing pool_id or invalid params)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing or invalid API key)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/roles/{roleID}": {
            "patch": {
                "description": "Updates the permissions of a role in the user pool.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Update role permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID to update",
                        "name": "roleID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role update request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid API key)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/roles/{role_id}": {
            "delete": {
                "description": "Deletes a specific role from the user pool.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner API Key",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the role to delete",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing role ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid API key)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/credential/request": {
            "post": {
                "description": "Generates and sends an OTP for resetting a user credential (email or phone).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-management"
                ],
                "summary": "Request OTP for credential reset",
                "parameters": [
                    {
                        "description": "Credential reset request containing credential type (email/phone) and value",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully with cache ID",
                        "schema": {
                            "$ref": "#/definitions/models.UserCredentialResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid ID-TOKEN or ACCESS-TOKEN)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/credential/verify": {
            "post": {
                "description": "Verifies OTP and updates the requested credential (phone/email) for the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-management"
                ],
                "summary": "Verify OTP for credential reset",
                "parameters": [
                    {
                        "description": "Credential reset verification request containing OTP and cache ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCredentialVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credential Reset Successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body, wrong OTP, or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing/invalid ID-TOKEN or ACCESS-TOKEN)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "OTP session not found or expired",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/password/reset": {
            "post": {
                "description": "Allows a logged-in user to reset their password by verifying the old password and setting a new one.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-management"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Password reset request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserPasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password Reset Successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or incorrect current password",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server or database error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AuditLog": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "actor_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "target_id": {
                    "type": "string"
                },
                "user_pool_id": {
                    "type": "string"
                }
            }
        },
        "models.CreateAPIKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "models.CreateAdminRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "organization"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                }
            }
        },
        "models.CreateAdminResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.CreateRoleRequest": {
            "type": "object",
            "required": [
                "name",
                "scope"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "scope": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.CreateUserPoolRequest": {
            "type": "object",
            "required": [
                "name",
                "schema"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "schema": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.CreateUserPoolResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.DisableAPIKeyResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "revoked": {
                    "type": "boolean"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "id_token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.LogoutRequest": {
            "type": "object",
            "required": [
                "id_token",
                "refresh_token"
            ],
            "properties": {
                "id_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.OtpLoginRequest": {
            "type": "object",
            "required": [
                "credential",
                "method",
                "userpool"
            ],
            "properties": {
                "credential": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "userpool": {
                    "type": "string"
                }
            }
        },
        "models.OtpLoginResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.OtpLoginVerifyRequest": {
            "type": "object",
            "required": [
                "answer",
                "id"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.PasswordLoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "userpool"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userpool": {
                    "type": "string"
                }
            }
        },
        "models.PasswordResetRequest": {
            "type": "object",
            "required": [
                "email",
                "userpool"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "userpool": {
                    "type": "string"
                }
            }
        },
        "models.PasswordResetResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.PasswordResetVerifyRequest": {
            "type": "object",
            "required": [
                "answer",
                "id",
                "password"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.RefreshSessionRequest": {
            "type": "object",
            "required": [
                "id_token",
                "refresh_token"
            ],
            "properties": {
                "id_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.RefreshSessionResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "id_token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.RolesRow": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "models.SignupCompleteResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "id_token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.SignupEmailRequest": {
            "type": "object",
            "required": [
                "email",
                "id",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.SignupEmailResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.SignupPhoneRequest": {
            "type": "object",
            "required": [
                "phone",
                "userpool"
            ],
            "properties": {
                "phone": {
                    "type": "string"
                },
                "userpool": {
                    "type": "string"
                }
            }
        },
        "models.SignupPhoneResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateRoleRequest": {
            "type": "object",
            "required": [
                "scope"
            ],
            "properties": {
                "scope": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UpdateUserPoolRequest": {
            "type": "object",
            "required": [
                "name",
                "schema"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "schema": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "models.UpdateUserPoolResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "models.UserCredentialRequest": {
            "type": "object",
            "required": [
                "credential",
                "value"
            ],
            "properties": {
                "credential": {
                    "type": "string",
                    "enum": [
                        "phone",
                        "email"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.UserCredentialResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserCredentialVerifyRequest": {
            "type": "object",
            "required": [
                "answer",
                "id"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.UserPasswordResetRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "models.UserSignupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserSignupVerification": {
            "type": "object",
            "required": [
                "answer",
                "id"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "AuthX API",
	Description:      "Authentication and credential management APIs.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
